/**
 * Utilidad para eliminar productos duplicados bas√°ndose en el SKU
 * Mantiene el producto con mejor informaci√≥n (m√°s stock, m√°s tallas, etc.)
 */

interface ProductoBase {
  sku: string;
  _id?: string;
  stock?: number;
  tallas?: any[];
  [key: string]: any;
}

/**
 * Elimina productos duplicados por SKU, manteniendo el mejor producto
 * @param productos Array de productos que pueden tener duplicados
 * @returns Array de productos √∫nicos sin duplicados
 */
export function eliminarProductosDuplicados<T extends ProductoBase>(productos: T[]): T[] {
  if (!Array.isArray(productos) || productos.length === 0) {
    return [];
  }

  // Usar Map para mejor rendimiento con grandes cantidades de datos
  const productosUnicos = new Map<string, T>();

  productos.forEach((producto) => {
    if (!producto.sku) {
      console.warn('Producto sin SKU encontrado:', producto);
      return;
    }

    const existente = productosUnicos.get(producto.sku);

    if (!existente) {
      // Si no existe, agregarlo
      productosUnicos.set(producto.sku, producto);
    } else {
      // Si existe, decidir cu√°l mantener bas√°ndose en criterios de calidad
      const nuevoEsMejor = esMejorProducto(producto, existente);
      if (nuevoEsMejor) {
        productosUnicos.set(producto.sku, producto);
      }
    }
  });

  const resultado = Array.from(productosUnicos.values());
  
  if (productos.length !== resultado.length) {
    console.log(`üîÑ Duplicados eliminados: ${productos.length} ‚Üí ${resultado.length} productos √∫nicos`);
  }

  return resultado;
}

/**
 * Determina si un producto es mejor que otro bas√°ndose en varios criterios
 * @param nuevo Producto nuevo a evaluar
 * @param existente Producto existente para comparar
 * @returns true si el nuevo producto es mejor
 */
function esMejorProducto<T extends ProductoBase>(nuevo: T, existente: T): boolean {
  // Criterio 1: Preferir el que tenga m√°s stock
  const stockNuevo = nuevo.stock || 0;
  const stockExistente = existente.stock || 0;
  
  if (stockNuevo > stockExistente) return true;
  if (stockNuevo < stockExistente) return false;

  // Criterio 2: Preferir el que tenga m√°s tallas disponibles
  const tallasNuevo = nuevo.tallas?.length || 0;
  const tallasExistente = existente.tallas?.length || 0;
  
  if (tallasNuevo > tallasExistente) return true;
  if (tallasNuevo < tallasExistente) return false;

  // Criterio 3: Preferir el que tenga _id (m√°s completo)
  if (nuevo._id && !existente._id) return true;
  if (!nuevo._id && existente._id) return false;

  // Criterio 4: Preferir el m√°s reciente (si tienen _createdAt)
  if (nuevo._createdAt && existente._createdAt) {
    return new Date(nuevo._createdAt) > new Date(existente._createdAt);
  }

  // Si son equivalentes, mantener el existente
  return false;
}

/**
 * Elimina duplicados de una lista simple bas√°ndose en una propiedad espec√≠fica
 * @param items Array de elementos
 * @param keyExtractor Funci√≥n que extrae la clave √∫nica de cada elemento
 * @returns Array sin duplicados
 */
export function eliminarDuplicadosPorClave<T>(
  items: T[], 
  keyExtractor: (item: T) => string | number
): T[] {
  const vistos = new Set();
  return items.filter(item => {
    const clave = keyExtractor(item);
    if (vistos.has(clave)) {
      return false;
    }
    vistos.add(clave);
    return true;
  });
}

/**
 * Valida que un producto tenga los campos m√≠nimos requeridos
 * @param producto Producto a validar
 * @returns true si el producto es v√°lido
 */
export function esProductoValido(producto: any): boolean {
  return !!(
    producto &&
    typeof producto === 'object' &&
    producto.sku &&
    producto.name &&
    (producto.priceecommerce > 0 || producto.preciomanual > 0)
  );
}

/**
 * Filtra y elimina duplicados de productos en una sola operaci√≥n
 * @param productos Array de productos
 * @returns Array de productos v√°lidos y √∫nicos
 */
export function limpiarProductos<T extends ProductoBase>(productos: T[]): T[] {
  // Primero filtrar productos v√°lidos
  const productosValidos = productos.filter(esProductoValido);
  
  // Luego eliminar duplicados
  return eliminarProductosDuplicados(productosValidos);
}